{
  "stats": {
    "suites": 33,
    "tests": 92,
    "passes": 22,
    "pending": 0,
    "failures": 70,
    "start": "2019-09-11T13:53:26.485Z",
    "end": "2019-09-11T13:55:37.992Z",
    "duration": 131507,
    "testsRegistered": 92,
    "passPercent": 23.9,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "danger",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "83e4f258-7b93-472e-86df-6c699777c309",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "a1f15fef-79c1-4ce1-a625-a6ee03128988",
        "title": "Frontend Tests",
        "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
        "file": "\\test\\frontend.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Frontend Tests \"before all\" hook",
            "timedOut": false,
            "duration": 17,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "driver = new webdriver.Builder()\n    .forBrowser('chrome')\n    .build();",
            "err": {},
            "isRoot": false,
            "uuid": "6e323534-6633-43b4-85eb-3543d46d3c2e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b1b6d204-1515-4036-b0ea-80f174f4cae0",
            "title": "Login tests",
            "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
            "file": "\\test\\frontend.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Test page load",
                "fullTitle": "Frontend Tests Login tests Test page load",
                "timedOut": false,
                "duration": 6580,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await driver.get(globals.SITE);\nlet title = await driver.getTitle();\nchai.assert.equal(title, 'Inside Rx');",
                "err": {},
                "isRoot": false,
                "uuid": "c794cd21-1e66-4bfd-9454-7f29c8f3080f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Test login authentication",
                "fullTitle": "Frontend Tests Login tests Test login authentication",
                "timedOut": false,
                "duration": 1793,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let fields = await driver.findElements(By.css('.MuiInputBase-input.MuiOutlinedInput-input'));\nawait fields[0].sendKeys(globals.SITE_USERNAME);\nawait fields[1].sendKeys(globals.SITE_PASSWORD);\nlet buttons = await driver.findElements(By.css('.MuiButtonBase-root.MuiButton-root.MuiButton-contained'));\nawait buttons[0].click();\nawait driver.wait(async function() {\n    return await driver.getCurrentUrl() === globals.SITE + \"/#/search\";\n});\nlet url = await driver.getCurrentUrl();\n    \nchai.assert.equal(url, globals.SITE + '/#/search');",
                "err": {},
                "isRoot": false,
                "uuid": "b1983a51-1d28-4708-ba93-7fdf0998296c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c794cd21-1e66-4bfd-9454-7f29c8f3080f",
              "b1983a51-1d28-4708-ba93-7fdf0998296c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8373,
            "root": false,
            "rootEmpty": false,
            "_timeout": 15000
          },
          {
            "uuid": "93f7a107-f499-4a93-80bc-200bda4c8f61",
            "title": "Drug Search Tests",
            "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
            "file": "\\test\\frontend.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "ff050c62-617e-45a7-8526-2eda73749db4",
                "title": "Test search for drug Acyclovir ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Acyclovir  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d68c96e1-f58a-4815-a451-1a1f2b6c5ec8",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Acyclovir  Test if search is successful ",
                    "timedOut": false,
                    "duration": 7127,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ab4ed358-0ed3-412e-b9c0-df10e5222f7f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Acyclovir  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 3,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "f1820644-8318-44e9-af8e-cc5f576dfe1c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Acyclovir  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "ef4c2c4a-b922-4f45-b59e-a5fe561841be",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "ab4ed358-0ed3-412e-b9c0-df10e5222f7f"
                ],
                "failures": [
                  "f1820644-8318-44e9-af8e-cc5f576dfe1c",
                  "ef4c2c4a-b922-4f45-b59e-a5fe561841be"
                ],
                "pending": [],
                "skipped": [],
                "duration": 7130,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "114d009c-8251-402a-9f29-5e31a80c161a",
                "title": "Test search for drug Amlodipine Besylate ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Amlodipine Besylate  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aee615c6-c89c-43fa-8605-9aa493a1cbb8",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Amlodipine Besylate  Test if search is successful ",
                    "timedOut": false,
                    "duration": 6484,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e3c03510-fc76-4a50-8ebb-2b36e7a26cd4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Amlodipine Besylate  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 1,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "b6a3afcf-a00f-4fff-8819-b590a1798b1c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Amlodipine Besylate  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "bf5caef9-1ed0-4a29-9c38-a3553a78b6f9",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "e3c03510-fc76-4a50-8ebb-2b36e7a26cd4"
                ],
                "failures": [
                  "b6a3afcf-a00f-4fff-8819-b590a1798b1c",
                  "bf5caef9-1ed0-4a29-9c38-a3553a78b6f9"
                ],
                "pending": [],
                "skipped": [],
                "duration": 6485,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "264abf2b-3e8b-4d9b-878b-be060923709e",
                "title": "Test search for drug Atorvastatin Calcium ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Atorvastatin Calcium  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5ec8e7f6-9cc8-40d1-84ed-fa87bb79d76a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Atorvastatin Calcium  Test if search is successful ",
                    "timedOut": false,
                    "duration": 7211,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2cab7a92-118f-49db-8dea-4bd9af2815db",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Atorvastatin Calcium  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5aee163d-811f-4a43-8d3d-00506b03611a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Atorvastatin Calcium  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 1,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "f75ecbce-0c4d-4c0c-88ec-f5959070c750",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "2cab7a92-118f-49db-8dea-4bd9af2815db",
                  "5aee163d-811f-4a43-8d3d-00506b03611a"
                ],
                "failures": [
                  "f75ecbce-0c4d-4c0c-88ec-f5959070c750"
                ],
                "pending": [],
                "skipped": [],
                "duration": 7212,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "fa168dff-33a8-4968-b5e5-894fb537a80e",
                "title": "Test search for drug Basaglar Kwikpen ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Basaglar Kwikpen  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d8d86890-371f-4f6e-8bf4-87d45ec7aeac",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Basaglar Kwikpen  Test if search is successful ",
                    "timedOut": false,
                    "duration": 6498,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8cf0d61c-a630-4baf-aed1-379b9e9699ab",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Basaglar Kwikpen  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "4ffa0963-ebd6-4661-8eba-f0003585b733",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Basaglar Kwikpen  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "07ba658d-a31e-4e64-b161-395cb929e6ce",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "8cf0d61c-a630-4baf-aed1-379b9e9699ab"
                ],
                "failures": [
                  "4ffa0963-ebd6-4661-8eba-f0003585b733",
                  "07ba658d-a31e-4e64-b161-395cb929e6ce"
                ],
                "pending": [],
                "skipped": [],
                "duration": 6498,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "867e441b-d0a3-4d93-9766-86168815d141",
                "title": "Test search for drug Citalopram Hydrobromide ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Citalopram Hydrobromide  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fa031a7e-9eb5-498e-b85b-d0cb16335677",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Citalopram Hydrobromide  Test if search is successful ",
                    "timedOut": false,
                    "duration": 5391,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "04a1c994-bf04-4232-b18c-1d79a64d1ec1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Citalopram Hydrobromide  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "e61935d7-a555-4c80-8d4c-93895e8be4e7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Citalopram Hydrobromide  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "386213b0-4298-4a0d-a5b2-efe414587331",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "04a1c994-bf04-4232-b18c-1d79a64d1ec1"
                ],
                "failures": [
                  "e61935d7-a555-4c80-8d4c-93895e8be4e7",
                  "386213b0-4298-4a0d-a5b2-efe414587331"
                ],
                "pending": [],
                "skipped": [],
                "duration": 5391,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "d46291ad-76d7-4137-9903-0e0ad55b0dc9",
                "title": "Test search for drug Clindamycin Hydrochloride ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Clindamycin Hydrochloride  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "852414b6-975f-45b3-bc82-e0360ce1e420",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Clindamycin Hydrochloride  Test if search is successful ",
                    "timedOut": false,
                    "duration": 5642,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dc73a7f1-4dc2-495d-bc2b-81ff1a7506ab",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Clindamycin Hydrochloride  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "166ce954-3244-48b8-9944-4d4c6c78d93a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Clindamycin Hydrochloride  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "6342af44-053b-40e3-8ca9-5b494212c2c4",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "dc73a7f1-4dc2-495d-bc2b-81ff1a7506ab"
                ],
                "failures": [
                  "166ce954-3244-48b8-9944-4d4c6c78d93a",
                  "6342af44-053b-40e3-8ca9-5b494212c2c4"
                ],
                "pending": [],
                "skipped": [],
                "duration": 5642,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "61617efd-9265-467a-a66e-a64b536c04aa",
                "title": "Test search for drug Clomiphene Citrate ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Clomiphene Citrate  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d1dc499d-ae7a-427c-89f6-c1e0c6ef9c16",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Clomiphene Citrate  Test if search is successful ",
                    "timedOut": false,
                    "duration": 7316,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8df6437e-9392-4416-bf02-4ccd783add93",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Clomiphene Citrate  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "caed8bfd-c8cf-46c5-b417-f45ca7056d66",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Clomiphene Citrate  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "e40e36db-ebc6-4aaa-8063-28286f84b994",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "8df6437e-9392-4416-bf02-4ccd783add93"
                ],
                "failures": [
                  "caed8bfd-c8cf-46c5-b417-f45ca7056d66",
                  "e40e36db-ebc6-4aaa-8063-28286f84b994"
                ],
                "pending": [],
                "skipped": [],
                "duration": 7316,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "8b2c370a-a92a-4ff3-8bbd-3e402459cbd2",
                "title": "Test search for drug Diclegis ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Diclegis  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a5ac815d-ce23-4f8f-9bcd-9fa92d969071",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Diclegis  Test if search is successful ",
                    "timedOut": false,
                    "duration": 4745,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "020485a1-17ee-4a22-8db4-5ff23c183b8f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Diclegis  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "dff8be64-b129-4413-86d9-3762290d6731",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Diclegis  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "efe67f77-20b9-479b-941a-744b9aa1ee8d",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "020485a1-17ee-4a22-8db4-5ff23c183b8f"
                ],
                "failures": [
                  "dff8be64-b129-4413-86d9-3762290d6731",
                  "efe67f77-20b9-479b-941a-744b9aa1ee8d"
                ],
                "pending": [],
                "skipped": [],
                "duration": 4745,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "76488bee-e8f8-414c-a157-c7c12406cc86",
                "title": "Test search for drug Ergocalciferol ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Ergocalciferol  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "134fcef4-cf6e-4d47-aa45-426cb8b1cdbe",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Ergocalciferol  Test if search is successful ",
                    "timedOut": false,
                    "duration": 5816,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cdc2985e-97c8-4b3f-9601-c2c2cf002eda",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Ergocalciferol  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "6d733320-f6c0-4cfa-9dda-82fe697abffe",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Ergocalciferol  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "60694fb7-cb26-498e-9363-83f45dca477e",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "cdc2985e-97c8-4b3f-9601-c2c2cf002eda"
                ],
                "failures": [
                  "6d733320-f6c0-4cfa-9dda-82fe697abffe",
                  "60694fb7-cb26-498e-9363-83f45dca477e"
                ],
                "pending": [],
                "skipped": [],
                "duration": 5816,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "28bd8232-ebe7-4dce-b594-e5da9737ca12",
                "title": "Test search for drug Ethinyl Estradiol-Norgestimate ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Ethinyl Estradiol-Norgestimate  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8b442f8d-cba1-4c34-a6e2-78f5a7518368",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Ethinyl Estradiol-Norgestimate  Test if search is successful ",
                    "timedOut": false,
                    "duration": 5658,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d6727b8d-dff8-4bf3-ba92-8e1e0020fdc6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Ethinyl Estradiol-Norgestimate  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "7f141c42-e6e2-44d1-8b5d-e6d30674a72a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Ethinyl Estradiol-Norgestimate  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "2cb5c9e6-e7c1-4e2e-86d1-ef5edc67730f",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "d6727b8d-dff8-4bf3-ba92-8e1e0020fdc6"
                ],
                "failures": [
                  "7f141c42-e6e2-44d1-8b5d-e6d30674a72a",
                  "2cb5c9e6-e7c1-4e2e-86d1-ef5edc67730f"
                ],
                "pending": [],
                "skipped": [],
                "duration": 5658,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "f5beb6f9-312d-4cf4-85aa-fcadb6d8c852",
                "title": "Test search for drug Flovent HFA ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Flovent HFA  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "87e0220d-ab96-4e5b-a657-8deea6ef70d8",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Flovent HFA  Test if search is successful ",
                    "timedOut": false,
                    "duration": 5326,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7d9fd153-78fe-4c50-ac7a-6989dcd2a61a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Flovent HFA  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "ea7fbed4-a49c-496c-bae2-e4771fec74c9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Flovent HFA  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "28159d35-d964-43dd-8ee6-c8b7052fc37a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "7d9fd153-78fe-4c50-ac7a-6989dcd2a61a"
                ],
                "failures": [
                  "ea7fbed4-a49c-496c-bae2-e4771fec74c9",
                  "28159d35-d964-43dd-8ee6-c8b7052fc37a"
                ],
                "pending": [],
                "skipped": [],
                "duration": 5326,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "2b945689-98a3-4c11-a53a-38e115b7ff45",
                "title": "Test search for drug Fluoxetine Hydrochloride ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Fluoxetine Hydrochloride  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b6427fcc-55bd-4359-b37f-c8011571e8d3",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Fluoxetine Hydrochloride  Test if search is successful ",
                    "timedOut": false,
                    "duration": 7395,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d23d5e74-70f7-45c7-91c6-487db035698d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Fluoxetine Hydrochloride  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "616555d1-67a6-4d21-8a40-a3a1ba4bb943",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Fluoxetine Hydrochloride  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "8efea038-3876-4c14-93fe-2e31cc847271",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "d23d5e74-70f7-45c7-91c6-487db035698d"
                ],
                "failures": [
                  "616555d1-67a6-4d21-8a40-a3a1ba4bb943",
                  "8efea038-3876-4c14-93fe-2e31cc847271"
                ],
                "pending": [],
                "skipped": [],
                "duration": 7395,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "988b0181-1c52-480a-864f-2fdb0cb3051e",
                "title": "Test search for drug Gabapentin ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Gabapentin  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "36dccf87-9d57-4167-9f09-f6ac6a643734",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Gabapentin  Test if search is successful ",
                    "timedOut": false,
                    "duration": 5314,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "700d8b0f-fe5f-4683-a45c-6a902a3ee17b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Gabapentin  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "2bb5154b-3015-4568-88d3-bb20c9dcd106",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Gabapentin  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "d7d65c6e-d30f-47f3-855c-fa3d32734d1a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "700d8b0f-fe5f-4683-a45c-6a902a3ee17b"
                ],
                "failures": [
                  "2bb5154b-3015-4568-88d3-bb20c9dcd106",
                  "d7d65c6e-d30f-47f3-855c-fa3d32734d1a"
                ],
                "pending": [],
                "skipped": [],
                "duration": 5314,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "2017fbe0-a3b5-43fc-a28f-6326bba0a85c",
                "title": "Test search for drug Humulin N  ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Humulin N   \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "39f55026-842b-4b53-8d33-ad93ee648a35",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Humulin N   Test if search is successful ",
                    "timedOut": false,
                    "duration": 5732,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "eb155bac-7470-4144-88e5-42377162731e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Humulin N   Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "72befb72-6918-4b6d-9eaf-f46760c79b01",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Humulin N   Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 1,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "d75ef903-a422-4969-8969-8e74b218666d",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "eb155bac-7470-4144-88e5-42377162731e"
                ],
                "failures": [
                  "72befb72-6918-4b6d-9eaf-f46760c79b01",
                  "d75ef903-a422-4969-8969-8e74b218666d"
                ],
                "pending": [],
                "skipped": [],
                "duration": 5733,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "26f8ec47-1d0d-43cd-bf27-0da14bcb1040",
                "title": "Test search for drug Hydrochlorothiazide-Losartan ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Hydrochlorothiazide-Losartan  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4c42bb43-d948-440b-9581-13ca4beed432",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Hydrochlorothiazide-Losartan  Test if search is successful ",
                    "timedOut": false,
                    "duration": 7748,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bf0ca223-0d7a-406b-8fe9-989790d57b46",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Hydrochlorothiazide-Losartan  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "582ea55f-a1e0-4ff9-be95-4e37e724575d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Hydrochlorothiazide-Losartan  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "e10cbe4d-6169-4d1f-aed7-a53914acbe0a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "bf0ca223-0d7a-406b-8fe9-989790d57b46"
                ],
                "failures": [
                  "582ea55f-a1e0-4ff9-be95-4e37e724575d",
                  "e10cbe4d-6169-4d1f-aed7-a53914acbe0a"
                ],
                "pending": [],
                "skipped": [],
                "duration": 7748,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "764dfc19-f92a-4c84-a7df-490cd0bfb677",
                "title": "Test search for drug Lantus Solostar ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Lantus Solostar  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a0fa373c-fd49-426e-8a3d-7f913625e91f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Lantus Solostar  Test if search is successful ",
                    "timedOut": false,
                    "duration": 5583,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4174093c-e17a-404b-af25-217c5b367f8b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Lantus Solostar  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "2e636282-c78a-4711-a13a-9e69e6ebb0b7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Lantus Solostar  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "494143c9-eda4-42e1-8a1b-294d42ace425",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "4174093c-e17a-404b-af25-217c5b367f8b"
                ],
                "failures": [
                  "2e636282-c78a-4711-a13a-9e69e6ebb0b7",
                  "494143c9-eda4-42e1-8a1b-294d42ace425"
                ],
                "pending": [],
                "skipped": [],
                "duration": 5583,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "a8f11e83-dab5-4675-a3a3-96ac81c3d21b",
                "title": "Test search for drug Levothyroxine Sodium ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Levothyroxine Sodium  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8e4b90aa-bf0b-4da2-bb35-3d4f7a13e6b7",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Levothyroxine Sodium  Test if search is successful ",
                    "timedOut": false,
                    "duration": 5587,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "461bd2a7-0552-4fdb-b9ac-88aafa6359c6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Levothyroxine Sodium  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "4fffdbed-8d3d-4f99-aa54-6f665ff1a0e1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Levothyroxine Sodium  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "83af79fa-f298-4c6f-9571-5fbf5046b181",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "461bd2a7-0552-4fdb-b9ac-88aafa6359c6"
                ],
                "failures": [
                  "4fffdbed-8d3d-4f99-aa54-6f665ff1a0e1",
                  "83af79fa-f298-4c6f-9571-5fbf5046b181"
                ],
                "pending": [],
                "skipped": [],
                "duration": 5587,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "60f25596-af1c-4863-bc03-b87cd304fe5c",
                "title": "Test search for drug Liothyronine Sodium ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Liothyronine Sodium  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "12547ef4-26af-4609-9689-d1b67b77a44d",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Liothyronine Sodium  Test if search is successful ",
                    "timedOut": false,
                    "duration": 6038,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "52a87ea5-c8d4-4c7a-acfc-dd8c7871bb96",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Liothyronine Sodium  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 1,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "5b635313-773c-4129-bc28-97d7c155bf9f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Liothyronine Sodium  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "6c9f9cdb-e378-4512-92e0-a6cfa9e05663",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "52a87ea5-c8d4-4c7a-acfc-dd8c7871bb96"
                ],
                "failures": [
                  "5b635313-773c-4129-bc28-97d7c155bf9f",
                  "6c9f9cdb-e378-4512-92e0-a6cfa9e05663"
                ],
                "pending": [],
                "skipped": [],
                "duration": 6039,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "3f06190d-947f-4ccd-b358-1e65323d56f4",
                "title": "Test search for drug Losartan Potassium ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Losartan Potassium  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "eff202ca-5e43-4c2e-87be-ceb603e6ba37",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Losartan Potassium  Test if search is successful ",
                    "timedOut": false,
                    "duration": 5658,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "722d70f4-e4b9-4ae1-b8a5-668acee41524",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Losartan Potassium  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "50539b30-bcdc-4454-86b0-077b0599215f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Losartan Potassium  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "c865bd2b-eae6-490a-93ed-7f9d52654221",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "722d70f4-e4b9-4ae1-b8a5-668acee41524"
                ],
                "failures": [
                  "50539b30-bcdc-4454-86b0-077b0599215f",
                  "c865bd2b-eae6-490a-93ed-7f9d52654221"
                ],
                "pending": [],
                "skipped": [],
                "duration": 5658,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "b6fdd54d-95b1-4875-83d9-98847f081d4f",
                "title": "Test search for drug Metformin Hydrochloride ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Metformin Hydrochloride  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7777c7a5-ce46-4aa4-a917-dc3b0950153d",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Metformin Hydrochloride  Test if search is successful ",
                    "timedOut": false,
                    "duration": 6487,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:122:45)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "5e75ef45-c537-46af-9a05-d2ef7487c1f5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Metformin Hydrochloride  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "8e1aaf98-d462-48a1-bd87-16798110148e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Metformin Hydrochloride  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "e64aec40-9d47-4ed1-820a-2e6ffcc11b15",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [],
                "failures": [
                  "5e75ef45-c537-46af-9a05-d2ef7487c1f5",
                  "8e1aaf98-d462-48a1-bd87-16798110148e",
                  "e64aec40-9d47-4ed1-820a-2e6ffcc11b15"
                ],
                "pending": [],
                "skipped": [],
                "duration": 6487,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "2f0da875-44e0-4162-80af-84b0192af0a3",
                "title": "Test search for drug Metoprolol Tartrate ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Metoprolol Tartrate  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9927b1a4-7263-4143-905b-be9552a603d1",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Metoprolol Tartrate  Test if search is successful ",
                    "timedOut": false,
                    "duration": 48,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:122:45)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "25fac0e3-9635-4885-8b53-a9194e4a1b17",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Metoprolol Tartrate  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "3a2eb6b3-3c2f-4f44-8e70-12795da5129a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Metoprolol Tartrate  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "758611e3-e9e6-4d35-94e4-ad7e1c826bbf",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [],
                "failures": [
                  "25fac0e3-9635-4885-8b53-a9194e4a1b17",
                  "3a2eb6b3-3c2f-4f44-8e70-12795da5129a",
                  "758611e3-e9e6-4d35-94e4-ad7e1c826bbf"
                ],
                "pending": [],
                "skipped": [],
                "duration": 48,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "3540e6fb-ef95-49e2-b55a-b54daf2158da",
                "title": "Test search for drug Novolin 70-30 ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Novolin 70-30  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ccfce1ab-89e7-41aa-8aad-6ea4fd6d79ba",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Novolin 70-30  Test if search is successful ",
                    "timedOut": false,
                    "duration": 27,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:122:45)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "5ad5d190-c75c-413e-836f-7581352ea50f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Novolin 70-30  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "65b412fc-179b-46e9-b4d6-1a27d3be45f2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Novolin 70-30  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "d3da340c-830d-45c8-977b-e3617dedd76d",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [],
                "failures": [
                  "5ad5d190-c75c-413e-836f-7581352ea50f",
                  "65b412fc-179b-46e9-b4d6-1a27d3be45f2",
                  "d3da340c-830d-45c8-977b-e3617dedd76d"
                ],
                "pending": [],
                "skipped": [],
                "duration": 27,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "095f5545-98f1-4f7c-9f01-3ee25fcba8c8",
                "title": "Test search for drug Pravastatin Sodium ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Pravastatin Sodium  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f0497087-8557-4c18-bf52-d833a6c54f6b",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Pravastatin Sodium  Test if search is successful ",
                    "timedOut": false,
                    "duration": 15,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:122:45)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "f47a1367-3cb3-454a-bbb9-62d54e986378",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Pravastatin Sodium  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "c3931431-a32f-4d46-a90f-c7a6176d4d85",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Pravastatin Sodium  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "0fa03466-f1ae-47bf-b12a-eab9df112c16",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [],
                "failures": [
                  "f47a1367-3cb3-454a-bbb9-62d54e986378",
                  "c3931431-a32f-4d46-a90f-c7a6176d4d85",
                  "0fa03466-f1ae-47bf-b12a-eab9df112c16"
                ],
                "pending": [],
                "skipped": [],
                "duration": 15,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "ace3f09e-6cc7-4e45-98a4-341b7bd8a565",
                "title": "Test search for drug Proair Respiclick ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Proair Respiclick  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ee0e60d9-1b6b-4e0e-bc2a-e6e04c596c6c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Proair Respiclick  Test if search is successful ",
                    "timedOut": false,
                    "duration": 16,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:122:45)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "cfd04c35-5f4c-4e41-b442-61a3ba7d97df",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Proair Respiclick  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "5f166e39-5b05-4427-b449-ab614cc79bda",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Proair Respiclick  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "a34ab59d-8b2c-42b1-8107-3705670dea58",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [],
                "failures": [
                  "cfd04c35-5f4c-4e41-b442-61a3ba7d97df",
                  "5f166e39-5b05-4427-b449-ab614cc79bda",
                  "a34ab59d-8b2c-42b1-8107-3705670dea58"
                ],
                "pending": [],
                "skipped": [],
                "duration": 16,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "c66ba556-11fd-4b40-85de-7568551e0dd1",
                "title": "Test search for drug Sertraline Hydrochloride ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Sertraline Hydrochloride  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4aeccb09-f32d-4156-a867-a44d03bfb7b3",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Sertraline Hydrochloride  Test if search is successful ",
                    "timedOut": false,
                    "duration": 15,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:122:45)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "0952ca71-8223-4398-8e7a-6f3c27e32b9f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Sertraline Hydrochloride  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "91eb235f-e512-41d3-9042-7e43f32f580c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Sertraline Hydrochloride  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 1,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "1a03e28f-044f-4f0b-97dd-a2f5faf78e34",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [],
                "failures": [
                  "0952ca71-8223-4398-8e7a-6f3c27e32b9f",
                  "91eb235f-e512-41d3-9042-7e43f32f580c",
                  "1a03e28f-044f-4f0b-97dd-a2f5faf78e34"
                ],
                "pending": [],
                "skipped": [],
                "duration": 16,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "c4656841-c392-4bf3-b3a6-4eb9d93ce825",
                "title": "Test search for drug Sulfamethoxazole-Trimethoprim Ds ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Sulfamethoxazole-Trimethoprim Ds  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "685d71cb-d54b-4aa7-ab84-0746b5ae9542",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Sulfamethoxazole-Trimethoprim Ds  Test if search is successful ",
                    "timedOut": false,
                    "duration": 16,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:122:45)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "934d6068-ad9a-42f6-bfb6-4915d16e0182",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Sulfamethoxazole-Trimethoprim Ds  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "cbb299ca-2d22-4f63-bb5f-08a477c2e883",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Sulfamethoxazole-Trimethoprim Ds  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "5d75ebf0-f8ef-4e4b-8c29-665894c8ecbf",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [],
                "failures": [
                  "934d6068-ad9a-42f6-bfb6-4915d16e0182",
                  "cbb299ca-2d22-4f63-bb5f-08a477c2e883",
                  "5d75ebf0-f8ef-4e4b-8c29-665894c8ecbf"
                ],
                "pending": [],
                "skipped": [],
                "duration": 16,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "26722ae4-f7c5-436a-bc8b-1c8354ff7b6b",
                "title": "Test search for drug Tamsulosin Hydrochloride ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Tamsulosin Hydrochloride  \"before all\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1c08f492-ba8c-4939-adca-e0f2d8eff3a7",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Tamsulosin Hydrochloride  Test if search is successful ",
                    "timedOut": false,
                    "duration": 22,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:122:45)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "a454d10d-1dbd-4c1b-b791-61365b9e6ab2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Tamsulosin Hydrochloride  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "b249b4c3-b783-42a7-b2a7-ec441f966fa8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Tamsulosin Hydrochloride  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 1,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "e24a47d7-84a8-4ab0-bd2f-382031f35203",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [],
                "failures": [
                  "a454d10d-1dbd-4c1b-b791-61365b9e6ab2",
                  "b249b4c3-b783-42a7-b2a7-ec441f966fa8",
                  "e24a47d7-84a8-4ab0-bd2f-382031f35203"
                ],
                "pending": [],
                "skipped": [],
                "duration": 23,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "34305693-1809-4ea6-bf77-c0157c7628f8",
                "title": "Test search for drug Trazodone Hydrochloride ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Trazodone Hydrochloride  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6d7e19bd-bbac-474d-baea-7b327e43b0d3",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Trazodone Hydrochloride  Test if search is successful ",
                    "timedOut": false,
                    "duration": 12,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:122:45)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "b0000d74-839b-4ffa-b1d1-7aef08d2ad4e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Trazodone Hydrochloride  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 1,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "1e5b9653-e369-4a59-8a9d-a1ebf16e29de",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Trazodone Hydrochloride  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "c49ce4d7-9e8d-4285-beae-dc8a415f2336",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [],
                "failures": [
                  "b0000d74-839b-4ffa-b1d1-7aef08d2ad4e",
                  "1e5b9653-e369-4a59-8a9d-a1ebf16e29de",
                  "c49ce4d7-9e8d-4285-beae-dc8a415f2336"
                ],
                "pending": [],
                "skipped": [],
                "duration": 13,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "63771571-371d-4c73-a81d-26b764b4299c",
                "title": "Test search for drug Venlafaxine Hydrochloride ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Venlafaxine Hydrochloride  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7f5047f6-481e-4d3d-8cf9-3c59f05edd25",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Venlafaxine Hydrochloride  Test if search is successful ",
                    "timedOut": false,
                    "duration": 18,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:122:45)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "e7071507-8090-4941-ba24-37fec8ad6d68",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Venlafaxine Hydrochloride  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "998e1841-a2f2-4a37-b38a-2ac2458fc59a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Venlafaxine Hydrochloride  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "ff4ac53a-316b-4aa1-84f4-fafdc2ba05e1",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [],
                "failures": [
                  "e7071507-8090-4941-ba24-37fec8ad6d68",
                  "998e1841-a2f2-4a37-b38a-2ac2458fc59a",
                  "ff4ac53a-316b-4aa1-84f4-fafdc2ba05e1"
                ],
                "pending": [],
                "skipped": [],
                "duration": 18,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "5ccd0592-eac5-450f-99b7-dceb86fdfa22",
                "title": "Test search for drug Yasmin ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Yasmin  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c45fe809-1386-430a-be24-b956ec40ad4a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Yasmin  Test if search is successful ",
                    "timedOut": false,
                    "duration": 14,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "let price = undefined;\ntry {\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();\n        \n    console.log(\"SEARCH HERE\");\n        \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n        \n    for (const dosage of dosages) {\n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            console.log(\"clicked d\");\n        }\n    }\n    \n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n        \n    for (const quantity of quantities) {\n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            console.log(\"clicked q\");\n        }\n    }\n    \n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {\n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            console.log(\"Dialog not found\");\n            return true;\n        }\n    });\n    \n    try {\n        price = await driver.findElement(By.css('.overallPrice.col-sm>.headerhelp')).getText();\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        let count = 0;\n        for (let i = 0; i < priceElements.length; i++) {\n            let text = await priceElements[i].getText();\n            if (text !== \"N/A\") {\n                prices.push(text);\n            }\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        price = undefined;\n        console.log(\"ERROR\");\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    chai.assert.isTrue(price !== undefined);\n}",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:122:45)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "7010e382-c1a0-4430-af42-74e6bc7e2f55",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Yasmin  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:139:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "4825ec22-dda3-455f-b569-c9f0f022214e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Yasmin  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== undefined);",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:142:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "9a813817-8e04-491b-bb35-dc564bf127e9",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [],
                "failures": [
                  "7010e382-c1a0-4430-af42-74e6bc7e2f55",
                  "4825ec22-dda3-455f-b569-c9f0f022214e",
                  "9a813817-8e04-491b-bb35-dc564bf127e9"
                ],
                "pending": [],
                "skipped": [],
                "duration": 14,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 15000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 15000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}