{
  "stats": {
    "suites": 35,
    "tests": 96,
    "passes": 50,
    "pending": 0,
    "failures": 46,
    "start": "2019-09-11T17:19:25.682Z",
    "end": "2019-09-11T17:21:35.969Z",
    "duration": 130287,
    "testsRegistered": 96,
    "passPercent": 52.1,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "warning",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "67ae132e-4149-473c-b877-e9f114db5a71",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "a0d27956-f13b-4495-9e20-33bede34185c",
        "title": "Frontend Tests",
        "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
        "file": "\\test\\frontend.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Frontend Tests \"before all\" hook",
            "timedOut": false,
            "duration": 17,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "dl_dir = \"C:\\\\Users\\\\dvalinotti\\\\Desktop\\\\GalaxE_Workspace\\\\RxWaveTests\\\\downloads\";\nlet options = new chrome.Options();\noptions.setUserPreferences({\n    \"plugins.plugins_list\": [{\"enabled\":false,\"name\":\"Chrome PDF Viewer\"}],\n    \"download\": {\n        \"prompt_for_download\": false,\n        \"default_directory\"  : dl_dir\n    }\n});\ndriver = new webdriver.Builder()\n    .forBrowser('chrome')\n    .setChromeOptions(options)\n    .build();",
            "err": {},
            "isRoot": false,
            "uuid": "74722dab-d25a-44d2-992e-b3fcea041489",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Frontend Tests \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "driver.quit();",
            "err": {},
            "isRoot": false,
            "uuid": "496ccf8b-376c-4a61-bbf3-dface46009a9",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "1119f3e2-ccfe-466e-9b7d-2a3fae6e2ac7",
            "title": "Login tests",
            "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
            "file": "\\test\\frontend.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Test page load",
                "fullTitle": "Frontend Tests Login tests Test page load",
                "timedOut": false,
                "duration": 5594,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await driver.get(globals.SITE);\nlet title = await driver.getTitle();\nchai.assert.equal(title, 'Inside Rx');",
                "err": {},
                "isRoot": false,
                "uuid": "d9f9a827-b436-4312-92c8-924795be619a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Test login authentication",
                "fullTitle": "Frontend Tests Login tests Test login authentication",
                "timedOut": false,
                "duration": 1496,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let fields = await driver.findElements(By.css('.MuiInputBase-input.MuiOutlinedInput-input'));\nawait fields[0].sendKeys(globals.SITE_USERNAME);\nawait fields[1].sendKeys(globals.SITE_PASSWORD);\nlet buttons = await driver.findElements(By.css('.MuiButtonBase-root.MuiButton-root.MuiButton-contained'));\nawait buttons[0].click();\nawait driver.wait(async function() {\n    return await driver.getCurrentUrl() === globals.SITE + \"/#/search\";\n});\nlet url = await driver.getCurrentUrl();\n    \nchai.assert.equal(url, globals.SITE + '/#/search');",
                "err": {},
                "isRoot": false,
                "uuid": "37645b19-60c6-4a42-a24a-160ed5b7d195",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d9f9a827-b436-4312-92c8-924795be619a",
              "37645b19-60c6-4a42-a24a-160ed5b7d195"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7090,
            "root": false,
            "rootEmpty": false,
            "_timeout": 15000
          },
          {
            "uuid": "79f96b94-f7de-4cdb-a312-c10976dee576",
            "title": "Dashboard Page Tests",
            "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
            "file": "\\test\\frontend.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Test if Dashboard page loads",
                "fullTitle": "Frontend Tests Dashboard Page Tests Test if Dashboard page loads",
                "timedOut": false,
                "duration": 665,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\nawait tabs[1].click();\n\nawait driver.wait(async function() {\n    try {\n        await driver.findElement(By.css('span.programPrice>div>span')).isDisplayed();\n        return true;\n    } catch (e) {\n        return false;\n    }\n});\nlet currentUrl = await driver.getCurrentUrl();\nchai.assert.isTrue(currentUrl === globals.SITE + \"/#/viewDashboard\");",
                "err": {},
                "isRoot": false,
                "uuid": "ad75bed8-651f-4886-9c7a-7969d71a561e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Test if prices display",
                "fullTitle": "Frontend Tests Dashboard Page Tests Test if prices display",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let dashPrices = await driver.findElements(By.css('span.programPrice>div>span'));\nlet pass = true;\nfor (const p of dashPrices) {\n    let t = p.getText();\n    if (t === \"$0.00\") {\n        pass = false;\n    }\n}\nchai.assert.isTrue(pass);",
                "err": {},
                "isRoot": false,
                "uuid": "9e672e54-15d4-489d-a44f-e9093199f284",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ad75bed8-651f-4886-9c7a-7969d71a561e",
              "9e672e54-15d4-489d-a44f-e9093199f284"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 679,
            "root": false,
            "rootEmpty": false,
            "_timeout": 15000
          },
          {
            "uuid": "af69344c-9c42-4bff-bef4-97a5fa712c4d",
            "title": "Reports Page Tests",
            "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
            "file": "\\test\\frontend.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Test if Reports page loads",
                "fullTitle": "Frontend Tests Reports Page Tests Test if Reports page loads",
                "timedOut": false,
                "duration": 879,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\nawait tabs[2].click();\n\nawait driver.wait(async function() {\n    try {\n        await driver.findElement(By.css('svg.pointer')).isDisplayed();\n        return true;\n    } catch (e) {\n        return false;\n    }\n});\nlet currentUrl = await driver.getCurrentUrl();\nchai.assert.isTrue(currentUrl === globals.SITE + \"/#/reports\");",
                "err": {},
                "isRoot": false,
                "uuid": "c389c7f7-3058-4345-8396-f2dc5375b2bb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Test if latest report successfully downloads",
                "fullTitle": "Frontend Tests Reports Page Tests Test if latest report successfully downloads",
                "timedOut": false,
                "duration": 3062,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await driver.findElement(By.css('svg.pointer')).click();\n// Wait for file to download\nawait sleep(3000);\n// Finds downloaded file - if found, deletes\nlet found = false;\ntry {\n    await fs.promises.access(dl_dir + \"\\\\poi-generated-file.xlsx\");\n    found = true;\n    await fs.promises.unlink(dl_dir + \"\\\\poi-generated-file.xlsx\")\n} catch (error) {\n    console.log(\"Downloaded report not found: \", error);\n}\nchai.assert.isTrue(found);",
                "err": {},
                "isRoot": false,
                "uuid": "97297266-5b1b-4b08-a5c7-6342d8e9d72a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c389c7f7-3058-4345-8396-f2dc5375b2bb",
              "97297266-5b1b-4b08-a5c7-6342d8e9d72a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3941,
            "root": false,
            "rootEmpty": false,
            "_timeout": 15000
          },
          {
            "uuid": "08c0d591-fc99-4d03-96ca-9e1240625b75",
            "title": "Drug Search Tests",
            "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
            "file": "\\test\\frontend.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "4596e998-4d77-46fe-9b43-446854337f87",
                "title": "Test search for drug Acyclovir ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Acyclovir  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1329bb0b-936e-466c-9dcd-74e680937153",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Acyclovir  Test if search is successful ",
                    "timedOut": false,
                    "duration": 3433,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "27d74834-6590-4c6b-bdee-b45123c6fc03",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Acyclovir  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "db8da071-c779-4cbe-b3d4-6dbc4dbba6e7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Acyclovir  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 1,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "da4be97c-9806-437a-be10-8773f6886f56",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "27d74834-6590-4c6b-bdee-b45123c6fc03",
                  "db8da071-c779-4cbe-b3d4-6dbc4dbba6e7"
                ],
                "failures": [
                  "da4be97c-9806-437a-be10-8773f6886f56"
                ],
                "pending": [],
                "skipped": [],
                "duration": 3434,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "3ae1ba70-4e35-4296-9b5d-e1ec4d3cb69b",
                "title": "Test search for drug Amlodipine Besylate ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Amlodipine Besylate  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4191fe21-a136-49a6-ade6-24f1e9ab6e92",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Amlodipine Besylate  Test if search is successful ",
                    "timedOut": false,
                    "duration": 3848,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0a1c14d5-37d1-4ba8-bf9e-2058b08c3dff",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Amlodipine Besylate  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "31318afc-19f0-49ba-b26d-04160435fbb3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Amlodipine Besylate  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d4afd725-804a-4260-898f-e40123cf8d47",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "0a1c14d5-37d1-4ba8-bf9e-2058b08c3dff",
                  "31318afc-19f0-49ba-b26d-04160435fbb3",
                  "d4afd725-804a-4260-898f-e40123cf8d47"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 3848,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "84876437-65f1-4068-a4a0-e48f63d6a294",
                "title": "Test search for drug Atorvastatin Calcium ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Atorvastatin Calcium  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "998ae23d-ae2e-4aac-adfe-3440ca97deba",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Atorvastatin Calcium  Test if search is successful ",
                    "timedOut": false,
                    "duration": 3731,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8f9b7120-9b9d-4fc0-91e9-5ee3f8709632",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Atorvastatin Calcium  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4890366e-9b69-47a4-ae98-e6b0f6acf349",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Atorvastatin Calcium  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "0797e51f-fc24-47f9-8b2f-0253bd0b1b05",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "8f9b7120-9b9d-4fc0-91e9-5ee3f8709632",
                  "4890366e-9b69-47a4-ae98-e6b0f6acf349"
                ],
                "failures": [
                  "0797e51f-fc24-47f9-8b2f-0253bd0b1b05"
                ],
                "pending": [],
                "skipped": [],
                "duration": 3731,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "2534d9e9-2954-4e5d-9aa2-02400fefd7d1",
                "title": "Test search for drug Basaglar Kwikpen ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Basaglar Kwikpen  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6a946a23-2dac-4dcc-b61c-959f0161b849",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Basaglar Kwikpen  Test if search is successful ",
                    "timedOut": false,
                    "duration": 3502,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fda82fa3-2f71-42e1-b75e-557b3916d274",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Basaglar Kwikpen  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:239:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "a89990a2-5157-4499-a679-c5fc11cd3f0b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Basaglar Kwikpen  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "48d40992-e9a8-4e6e-ba4a-1a6934e30aa7",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "fda82fa3-2f71-42e1-b75e-557b3916d274"
                ],
                "failures": [
                  "a89990a2-5157-4499-a679-c5fc11cd3f0b",
                  "48d40992-e9a8-4e6e-ba4a-1a6934e30aa7"
                ],
                "pending": [],
                "skipped": [],
                "duration": 3502,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "41a33660-8a08-4200-a286-3af179fb1a70",
                "title": "Test search for drug Citalopram Hydrobromide ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Citalopram Hydrobromide  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fd6ff58c-853c-4ee3-bc09-62c630556be9",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Citalopram Hydrobromide  Test if search is successful ",
                    "timedOut": false,
                    "duration": 3808,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "235b9715-a4be-4959-b264-3a857823634e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Citalopram Hydrobromide  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "52b81f12-c49f-4bcf-aec1-665d066046aa",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Citalopram Hydrobromide  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "18bba22c-b9c1-4c33-8672-348d51e17fa1",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "235b9715-a4be-4959-b264-3a857823634e",
                  "52b81f12-c49f-4bcf-aec1-665d066046aa"
                ],
                "failures": [
                  "18bba22c-b9c1-4c33-8672-348d51e17fa1"
                ],
                "pending": [],
                "skipped": [],
                "duration": 3808,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "25901385-9cdd-4026-b0e9-c940300674c5",
                "title": "Test search for drug Clindamycin Hydrochloride ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Clindamycin Hydrochloride  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4f568e25-c4b4-4cfc-9dab-25a871dec551",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Clindamycin Hydrochloride  Test if search is successful ",
                    "timedOut": false,
                    "duration": 3864,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fbf80d59-4de6-43fc-b7b9-9a105e5d1870",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Clindamycin Hydrochloride  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:239:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "5e98bc1a-7fad-4fdf-a3f6-5e374a72bcd2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Clindamycin Hydrochloride  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "1b1d77f5-cf8e-4166-8e03-ebaa692c31ba",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "fbf80d59-4de6-43fc-b7b9-9a105e5d1870"
                ],
                "failures": [
                  "5e98bc1a-7fad-4fdf-a3f6-5e374a72bcd2",
                  "1b1d77f5-cf8e-4166-8e03-ebaa692c31ba"
                ],
                "pending": [],
                "skipped": [],
                "duration": 3864,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "7a0ae6f3-609b-4f00-947f-42d079dfa709",
                "title": "Test search for drug Clomiphene Citrate ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Clomiphene Citrate  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d80b2412-1405-45ed-8278-2bcf40d67615",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Clomiphene Citrate  Test if search is successful ",
                    "timedOut": false,
                    "duration": 3593,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5f0b15a2-6cbc-4868-b83e-8bd042166815",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Clomiphene Citrate  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:239:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "6b680297-127c-483b-9fec-1194bc9756ba",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Clomiphene Citrate  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "19e4f4c4-2507-43ca-9b8e-fa0d949244a3",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "5f0b15a2-6cbc-4868-b83e-8bd042166815"
                ],
                "failures": [
                  "6b680297-127c-483b-9fec-1194bc9756ba",
                  "19e4f4c4-2507-43ca-9b8e-fa0d949244a3"
                ],
                "pending": [],
                "skipped": [],
                "duration": 3593,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "553f2d9e-f6b0-4623-b974-336a213662f5",
                "title": "Test search for drug Diclegis ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Diclegis  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "77d2d654-51c3-484a-adc2-19be76d264a4",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Diclegis  Test if search is successful ",
                    "timedOut": false,
                    "duration": 2996,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6390d441-94ae-4bc4-baad-79af22059a75",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Diclegis  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:239:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "62c701b5-3b9e-4481-b1bb-b395d81f2d13",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Diclegis  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "e470dc9d-b040-4fb9-bc90-1b4b9aff33dd",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "6390d441-94ae-4bc4-baad-79af22059a75"
                ],
                "failures": [
                  "62c701b5-3b9e-4481-b1bb-b395d81f2d13",
                  "e470dc9d-b040-4fb9-bc90-1b4b9aff33dd"
                ],
                "pending": [],
                "skipped": [],
                "duration": 2996,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "e059280c-b703-4244-a7ca-f96cb27eeb46",
                "title": "Test search for drug Ergocalciferol ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Ergocalciferol  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4c3c8612-0ed0-44e4-8f25-fd3df131d2b9",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Ergocalciferol  Test if search is successful ",
                    "timedOut": false,
                    "duration": 3427,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1ca257fe-9123-40ae-ba7f-298ccf58d988",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Ergocalciferol  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:239:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "dfee0ea5-cd24-4a0b-be61-76102781aba1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Ergocalciferol  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "d80fdc3b-7675-453f-bf6b-0797e46ddb64",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "1ca257fe-9123-40ae-ba7f-298ccf58d988"
                ],
                "failures": [
                  "dfee0ea5-cd24-4a0b-be61-76102781aba1",
                  "d80fdc3b-7675-453f-bf6b-0797e46ddb64"
                ],
                "pending": [],
                "skipped": [],
                "duration": 3427,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "4ce7e2ee-182c-4f71-afb1-80c6526b960a",
                "title": "Test search for drug Ethinyl Estradiol-Norgestimate ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Ethinyl Estradiol-Norgestimate  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "48248e9d-0901-44cc-b1e0-3112303572d1",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Ethinyl Estradiol-Norgestimate  Test if search is successful ",
                    "timedOut": false,
                    "duration": 4441,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "decd7c1f-8333-493d-ba50-4092a447d8d2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Ethinyl Estradiol-Norgestimate  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:239:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "f809193e-3ff9-4338-8d13-5f615f789795",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Ethinyl Estradiol-Norgestimate  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "c218412e-5050-4b5d-ac39-efb52edf2f37",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "decd7c1f-8333-493d-ba50-4092a447d8d2"
                ],
                "failures": [
                  "f809193e-3ff9-4338-8d13-5f615f789795",
                  "c218412e-5050-4b5d-ac39-efb52edf2f37"
                ],
                "pending": [],
                "skipped": [],
                "duration": 4441,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "25be4c50-96ac-4a7f-9699-8dc5d675aca4",
                "title": "Test search for drug Flovent HFA ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Flovent HFA  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4cbf3b47-af89-4d7b-b032-f0fcda04423f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Flovent HFA  Test if search is successful ",
                    "timedOut": false,
                    "duration": 3252,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f64d372b-3571-440f-9212-858825f4c201",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Flovent HFA  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:239:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "a97487db-acce-463f-b63f-81cfd05aec29",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Flovent HFA  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "81c4e39b-a730-4b26-8f03-ccb9254baae4",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "f64d372b-3571-440f-9212-858825f4c201",
                  "81c4e39b-a730-4b26-8f03-ccb9254baae4"
                ],
                "failures": [
                  "a97487db-acce-463f-b63f-81cfd05aec29"
                ],
                "pending": [],
                "skipped": [],
                "duration": 3252,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "78777421-49c3-4ffe-b24b-93225658fd2c",
                "title": "Test search for drug Fluoxetine Hydrochloride ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Fluoxetine Hydrochloride  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "faca15c5-b946-48dc-aa5a-24b52ead831b",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Fluoxetine Hydrochloride  Test if search is successful ",
                    "timedOut": false,
                    "duration": 4037,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6633b15c-8ada-4d12-a430-7d6f7ed516f9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Fluoxetine Hydrochloride  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:239:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "f27594bb-15b2-4c8c-89c9-da10e2f55bfd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Fluoxetine Hydrochloride  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "1c9ff2c0-896d-46e2-8a6b-ce8ea6a4445c",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "6633b15c-8ada-4d12-a430-7d6f7ed516f9"
                ],
                "failures": [
                  "f27594bb-15b2-4c8c-89c9-da10e2f55bfd",
                  "1c9ff2c0-896d-46e2-8a6b-ce8ea6a4445c"
                ],
                "pending": [],
                "skipped": [],
                "duration": 4037,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "b9a7100c-0851-4855-8e61-e70743430659",
                "title": "Test search for drug Gabapentin ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Gabapentin  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "303e623f-231e-4e03-9850-f10e682ecf72",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Gabapentin  Test if search is successful ",
                    "timedOut": false,
                    "duration": 3226,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5309d7fe-ba7f-468d-9d12-be6d043d5479",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Gabapentin  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "993a7b6a-afaa-46a6-b33f-75b80a2f25fa",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Gabapentin  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "5a5e8506-f8c8-4145-ab52-0af1e33530c1",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "5309d7fe-ba7f-468d-9d12-be6d043d5479",
                  "993a7b6a-afaa-46a6-b33f-75b80a2f25fa"
                ],
                "failures": [
                  "5a5e8506-f8c8-4145-ab52-0af1e33530c1"
                ],
                "pending": [],
                "skipped": [],
                "duration": 3227,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "64635636-0d98-4d6c-8cf6-a3ec3b0857e8",
                "title": "Test search for drug Humulin N  ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Humulin N   \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b4b86c4b-00c4-4f05-81a4-59e3f2ccd016",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Humulin N   Test if search is successful ",
                    "timedOut": false,
                    "duration": 3142,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "367582c6-f071-4815-900a-ca0ebc131819",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Humulin N   Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:239:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "94cad951-c72d-4771-8956-02fd3bc623a7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Humulin N   Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "dc1fb9d9-f5bd-42a2-b3d4-3b60d4d9a63c",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "367582c6-f071-4815-900a-ca0ebc131819"
                ],
                "failures": [
                  "94cad951-c72d-4771-8956-02fd3bc623a7",
                  "dc1fb9d9-f5bd-42a2-b3d4-3b60d4d9a63c"
                ],
                "pending": [],
                "skipped": [],
                "duration": 3142,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "552d104a-fcf9-4a11-9e27-46131b3b19a5",
                "title": "Test search for drug Hydrochlorothiazide-Losartan ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Hydrochlorothiazide-Losartan  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2138fb0f-f88b-4d26-8df6-a277e1a48bf6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Hydrochlorothiazide-Losartan  Test if search is successful ",
                    "timedOut": false,
                    "duration": 4023,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5979b30b-0110-4681-8c99-a037860d18de",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Hydrochlorothiazide-Losartan  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:239:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "dfecf769-f24a-441a-8465-56f73dfc658c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Hydrochlorothiazide-Losartan  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "88c755a6-4c06-452e-aed0-ee5a200c3bce",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "5979b30b-0110-4681-8c99-a037860d18de"
                ],
                "failures": [
                  "dfecf769-f24a-441a-8465-56f73dfc658c",
                  "88c755a6-4c06-452e-aed0-ee5a200c3bce"
                ],
                "pending": [],
                "skipped": [],
                "duration": 4023,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "5a3016b1-9f11-4ded-a65b-cf981f1e5c4b",
                "title": "Test search for drug Lantus Solostar ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Lantus Solostar  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d5abb1df-8689-48c0-aae4-1a31c0ed180a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Lantus Solostar  Test if search is successful ",
                    "timedOut": false,
                    "duration": 3373,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6413b731-27b8-4c26-909e-72e326fe3a11",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Lantus Solostar  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:239:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "9292beae-7a4d-4b37-aba3-67f44b303b6a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Lantus Solostar  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 1,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "8fdf8ba3-0f86-4019-a483-a0482aa6ef17",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "6413b731-27b8-4c26-909e-72e326fe3a11"
                ],
                "failures": [
                  "9292beae-7a4d-4b37-aba3-67f44b303b6a",
                  "8fdf8ba3-0f86-4019-a483-a0482aa6ef17"
                ],
                "pending": [],
                "skipped": [],
                "duration": 3374,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "1b5a81b0-2e9c-4caf-bdd8-0f3267c9ec96",
                "title": "Test search for drug Levothyroxine Sodium ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Levothyroxine Sodium  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cb7ce2de-84d3-46b9-a871-1bc62a975b00",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Levothyroxine Sodium  Test if search is successful ",
                    "timedOut": false,
                    "duration": 3927,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "566a48ed-f315-48f3-9b81-b3e4c26f0e03",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Levothyroxine Sodium  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 1,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:239:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "0ceac1c0-8865-4f8d-b5dc-0501b496c065",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Levothyroxine Sodium  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "f2e5a06a-82ca-4a6f-9092-f7706798f890",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "566a48ed-f315-48f3-9b81-b3e4c26f0e03"
                ],
                "failures": [
                  "0ceac1c0-8865-4f8d-b5dc-0501b496c065",
                  "f2e5a06a-82ca-4a6f-9092-f7706798f890"
                ],
                "pending": [],
                "skipped": [],
                "duration": 3928,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "45ba6fc3-269a-49b0-8f94-53369e74ad8b",
                "title": "Test search for drug Liothyronine Sodium ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Liothyronine Sodium  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "957ee666-186b-46e7-81d1-029833e377e1",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Liothyronine Sodium  Test if search is successful ",
                    "timedOut": false,
                    "duration": 3636,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fe361ec8-805e-42e7-be6d-4406a4a29429",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Liothyronine Sodium  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:239:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "dbd1d19b-aaf6-4769-a8e8-1dee2bcc0fa9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Liothyronine Sodium  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "34673169-4ce7-4aaf-af4c-e2a95755e920",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "fe361ec8-805e-42e7-be6d-4406a4a29429"
                ],
                "failures": [
                  "dbd1d19b-aaf6-4769-a8e8-1dee2bcc0fa9",
                  "34673169-4ce7-4aaf-af4c-e2a95755e920"
                ],
                "pending": [],
                "skipped": [],
                "duration": 3636,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "b331587a-3d33-4d20-be96-c20a7bc52589",
                "title": "Test search for drug Losartan Potassium ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Losartan Potassium  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f40e302f-3740-417d-89ba-d08c6bd3f4d1",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Losartan Potassium  Test if search is successful ",
                    "timedOut": false,
                    "duration": 3538,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "83ff1e06-e587-4638-b1ea-c34d4480e259",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Losartan Potassium  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "82358b0e-b975-44b7-8fb5-5b3a7e83d830",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Losartan Potassium  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "f7ea204c-59b8-417d-82d0-079d5cd0fd22",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "83ff1e06-e587-4638-b1ea-c34d4480e259",
                  "82358b0e-b975-44b7-8fb5-5b3a7e83d830"
                ],
                "failures": [
                  "f7ea204c-59b8-417d-82d0-079d5cd0fd22"
                ],
                "pending": [],
                "skipped": [],
                "duration": 3538,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "d2a4474a-050d-4f87-8579-e6d78dd65e37",
                "title": "Test search for drug Metformin Hydrochloride ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Metformin Hydrochloride  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "efff6906-d638-4d49-aff4-8ba187c51e73",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Metformin Hydrochloride  Test if search is successful ",
                    "timedOut": false,
                    "duration": 3799,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c42390d8-8075-4722-a113-4545318f6f6a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Metformin Hydrochloride  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "125110ef-eb1f-4bd1-bb17-486e4d8916dc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Metformin Hydrochloride  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "75201cf0-a7bf-49ad-9d99-8513682b619d",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "c42390d8-8075-4722-a113-4545318f6f6a",
                  "125110ef-eb1f-4bd1-bb17-486e4d8916dc"
                ],
                "failures": [
                  "75201cf0-a7bf-49ad-9d99-8513682b619d"
                ],
                "pending": [],
                "skipped": [],
                "duration": 3799,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "7f96bdb1-a27c-4dcf-8500-4fa8e7934e54",
                "title": "Test search for drug Metoprolol Tartrate ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Metoprolol Tartrate  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d2fd18e0-8113-45a3-aff9-adba00feebe6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Metoprolol Tartrate  Test if search is successful ",
                    "timedOut": false,
                    "duration": 3974,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "92911f74-30a9-4ca3-bc1f-148707331aea",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Metoprolol Tartrate  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:239:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "e0dc43a2-73d8-4d1d-abae-be9c9958fe48",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Metoprolol Tartrate  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "033e0dc8-aade-4aaa-a55c-f1f8748b3d65",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "92911f74-30a9-4ca3-bc1f-148707331aea"
                ],
                "failures": [
                  "e0dc43a2-73d8-4d1d-abae-be9c9958fe48",
                  "033e0dc8-aade-4aaa-a55c-f1f8748b3d65"
                ],
                "pending": [],
                "skipped": [],
                "duration": 3974,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "da2195db-f04f-48d8-a1be-d9c79033a60f",
                "title": "Test search for drug Novolin 70-30 ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Novolin 70-30  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "64a9d4ac-448d-4565-90c1-6896c2b811c1",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Novolin 70-30  Test if search is successful ",
                    "timedOut": false,
                    "duration": 7611,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3bb23805-5d2e-4e56-b004-5d09267a69a8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Novolin 70-30  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:239:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "94dc300e-0ecf-46cd-9f08-050d7067b9cc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Novolin 70-30  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "1718c9b9-75dd-4da6-ae08-5bf32e9c0bc5",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "3bb23805-5d2e-4e56-b004-5d09267a69a8"
                ],
                "failures": [
                  "94dc300e-0ecf-46cd-9f08-050d7067b9cc",
                  "1718c9b9-75dd-4da6-ae08-5bf32e9c0bc5"
                ],
                "pending": [],
                "skipped": [],
                "duration": 7611,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "4a015675-e0ee-4a72-a890-88d189fa7aad",
                "title": "Test search for drug Pravastatin Sodium ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Pravastatin Sodium  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "60391de1-e14b-404c-963d-014f49195f05",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Pravastatin Sodium  Test if search is successful ",
                    "timedOut": false,
                    "duration": 3513,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2cd3b4f7-3cf6-4c1e-9f70-571b7741f29c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Pravastatin Sodium  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ed160474-3099-42d5-abec-029e245f965d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Pravastatin Sodium  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 1,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "fe8038fd-6753-4116-a7e0-0755fc8b1630",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "2cd3b4f7-3cf6-4c1e-9f70-571b7741f29c",
                  "ed160474-3099-42d5-abec-029e245f965d"
                ],
                "failures": [
                  "fe8038fd-6753-4116-a7e0-0755fc8b1630"
                ],
                "pending": [],
                "skipped": [],
                "duration": 3514,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "97ea6145-6a7c-43e7-a001-dbc8ec1965fa",
                "title": "Test search for drug Proair Respiclick ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Proair Respiclick  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b441acae-36a6-4afc-a5ff-52464bd9caab",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Proair Respiclick  Test if search is successful ",
                    "timedOut": false,
                    "duration": 3409,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b493317f-1162-4f73-a152-57970261f162",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Proair Respiclick  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:239:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "62ed0a7c-d35a-4e5f-bc15-4183b31c2574",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Proair Respiclick  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 1,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "efa56cdd-e6ff-44b1-8e9d-e02c4e9a8095",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "b493317f-1162-4f73-a152-57970261f162"
                ],
                "failures": [
                  "62ed0a7c-d35a-4e5f-bc15-4183b31c2574",
                  "efa56cdd-e6ff-44b1-8e9d-e02c4e9a8095"
                ],
                "pending": [],
                "skipped": [],
                "duration": 3410,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "463562d4-d9fd-47d7-94b0-9fea1955d72f",
                "title": "Test search for drug Sertraline Hydrochloride ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Sertraline Hydrochloride  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7d03b394-1bc8-4132-b673-b63aba00e21c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Sertraline Hydrochloride  Test if search is successful ",
                    "timedOut": false,
                    "duration": 3634,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c462501a-e780-4c50-b018-75a64e8f0316",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Sertraline Hydrochloride  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "656dae29-2866-44f7-bbdd-a1a0f83a4872",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Sertraline Hydrochloride  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "25592748-e20a-4cba-97b5-8d8a0e87e436",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "c462501a-e780-4c50-b018-75a64e8f0316",
                  "656dae29-2866-44f7-bbdd-a1a0f83a4872"
                ],
                "failures": [
                  "25592748-e20a-4cba-97b5-8d8a0e87e436"
                ],
                "pending": [],
                "skipped": [],
                "duration": 3634,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "9e9162b6-4d48-4dcd-9153-3a2770c46db6",
                "title": "Test search for drug Sulfamethoxazole-Trimethoprim Ds ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Sulfamethoxazole-Trimethoprim Ds  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0471feb2-05a0-4b6e-b263-259f9151e4d4",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Sulfamethoxazole-Trimethoprim Ds  Test if search is successful ",
                    "timedOut": false,
                    "duration": 7810,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "65efdc25-c286-44f0-aaa0-d33ec61d3391",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Sulfamethoxazole-Trimethoprim Ds  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:239:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "57d9a11d-eeb2-4274-a436-c188b75669f4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Sulfamethoxazole-Trimethoprim Ds  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "aeccbb4f-7292-4b2a-b3ab-eb6792e45762",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "65efdc25-c286-44f0-aaa0-d33ec61d3391"
                ],
                "failures": [
                  "57d9a11d-eeb2-4274-a436-c188b75669f4",
                  "aeccbb4f-7292-4b2a-b3ab-eb6792e45762"
                ],
                "pending": [],
                "skipped": [],
                "duration": 7810,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "f3c23b61-c1d3-4552-90fd-372258eea9ea",
                "title": "Test search for drug Tamsulosin Hydrochloride ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Tamsulosin Hydrochloride  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d32114e3-e335-4811-bd3e-3aa9d5855da0",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Tamsulosin Hydrochloride  Test if search is successful ",
                    "timedOut": false,
                    "duration": 3588,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "98f141e6-baba-45ea-baaf-b2aa39affb15",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Tamsulosin Hydrochloride  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5a5527dd-a4de-4b4e-bf33-929bfdf6144e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Tamsulosin Hydrochloride  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "e7a13958-4507-41b9-b85d-e355dc1df7d4",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "98f141e6-baba-45ea-baaf-b2aa39affb15",
                  "5a5527dd-a4de-4b4e-bf33-929bfdf6144e"
                ],
                "failures": [
                  "e7a13958-4507-41b9-b85d-e355dc1df7d4"
                ],
                "pending": [],
                "skipped": [],
                "duration": 3588,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "6a57c39e-563e-4dbf-bce9-794501ad6ae1",
                "title": "Test search for drug Trazodone Hydrochloride ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Trazodone Hydrochloride  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "039bb83a-20e1-4873-9c72-ca43ec157474",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Trazodone Hydrochloride  Test if search is successful ",
                    "timedOut": false,
                    "duration": 5694,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e2d59852-93f6-4fab-a53d-3e18ead70b37",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Trazodone Hydrochloride  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "435215c4-3df9-497d-8cce-4db09e80199e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Trazodone Hydrochloride  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "c85c302a-234c-4a99-8b2a-f5144550ff4c",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "e2d59852-93f6-4fab-a53d-3e18ead70b37",
                  "435215c4-3df9-497d-8cce-4db09e80199e"
                ],
                "failures": [
                  "c85c302a-234c-4a99-8b2a-f5144550ff4c"
                ],
                "pending": [],
                "skipped": [],
                "duration": 5694,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "964fcb9d-698b-4f90-a6f0-cb14fca20d6f",
                "title": "Test search for drug Venlafaxine Hydrochloride ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Venlafaxine Hydrochloride  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "32efd25d-a834-48f5-8d0d-9327114f2a97",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Venlafaxine Hydrochloride  Test if search is successful ",
                    "timedOut": false,
                    "duration": 3725,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fb18d528-7a58-4b3e-8562-b1b9d0a05118",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Venlafaxine Hydrochloride  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "61608215-4fdd-4913-9669-c4ed7dad7ef4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Venlafaxine Hydrochloride  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "eed29620-9bd4-44fe-bf10-2f915876a080",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "fb18d528-7a58-4b3e-8562-b1b9d0a05118",
                  "61608215-4fdd-4913-9669-c4ed7dad7ef4"
                ],
                "failures": [
                  "eed29620-9bd4-44fe-bf10-2f915876a080"
                ],
                "pending": [],
                "skipped": [],
                "duration": 3725,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              },
              {
                "uuid": "ccd7871c-412a-47e8-bd92-4a12f46bb009",
                "title": "Test search for drug Yasmin ",
                "fullFile": "C:\\Users\\dvalinotti\\Desktop\\GalaxE_Workspace\\RxWaveTests\\test\\frontend.test.js",
                "file": "\\test\\frontend.test.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Yasmin  \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "prices = [];",
                    "err": {},
                    "isRoot": false,
                    "uuid": "82ee2267-822a-4d9e-a3b8-e8197a927202",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Test if search is successful ",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Yasmin  Test if search is successful ",
                    "timedOut": false,
                    "duration": 2864,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let averagePrice = undefined;\nlet currentPrice = undefined;\nlet lmPrice = undefined;\ntry {\n    let tabs = await driver.findElements(By.css('button[role=\"tab\"]'));\n    await tabs[0].click();\n    await driver.findElement(By.id('downshift-simple-input')).sendKeys(drug.Name);\n    await sleep(1250);    // Wait for search suggestions to populate\n    await driver.findElement(By.id('downshift-simple-item-0')).click();\n    await driver.findElement(By.id('myZipCode')).sendKeys(drug.ZipCode);\n     // Finds correct dosage and selects\n    await driver.findElement(By.css('.form-control[name=\"drugStrength\"]')).click();                \n    let dosages = await driver.findElements(By.css('.form-control[name=\"drugStrength\"]>option'));\n    for (const dosage of dosages) {                            \n        let text = await dosage.getText();\n        if (text.includes(drug.Dosage)) {\n            await dosage.click();\n            // console.log(\"clicked d\");\n        }\n    }\n    // Finds correct quantity and selects\n    await driver.findElement(By.css('select[name=\"drugQuantity\"]')).click();\n    let quantities = await driver.findElements(By.css('select[name=\"drugQuantity\"]>option'));\n    for (const quantity of quantities) {                        \n        let text = await quantity.getText();\n        if (text.includes(drug.Quantity)) {\n            await quantity.click();\n            // console.log(\"clicked q\");\n        }\n    }\n    \n    // Wait for search to finish before continuing\n    await driver.findElement(By.css('.form-control.pointer')).click();\n    await driver.wait(async function() {                       \n        try {\n            await driver.findElement(By.className('MuiDialog-root')).isDisplayed();\n            return false;\n        } catch (e) {\n            return true;\n        }\n    });\n    \n    try {\n        // Retrieves all header prices\n        let overallPrices = await driver.findElements(By.css('div.overallPrice>div.headerhelp'));\n        averagePrice = await overallPrices[0].getText();\n        currentPrice = await overallPrices[1].getText();\n        lmPrice = await overallPrices[2].getText();\n        // Save each program's price in prices array\n        let priceElements = await driver.findElements(By.className('compPrice'));\n        for (let i = 0; i < priceElements.length; i++) {            \n            let text = await priceElements[i].getText();\n            prices.push(text);\n        }\n        await driver.findElement(By.css('.MuiButtonBase-root.MuiTab-root.MuiTab-textColorInherit.Mui-selected')).click();\n        // Clear text fields in the case of a failed search\n        await driver.findElement(By.id('downshift-simple-input')).clear();\n        await driver.findElement(By.id('myZipCode')).clear();\n    } catch (e) {\n        // Refresh if error occurs\n        await driver.navigate().refresh();\n    }\n} catch (e) {\n    console.log(e);\n} finally {\n    // Asserts that all header prices exist\n    chai.assert.isTrue(\n        averagePrice !== \"N/A\" &&\n        currentPrice !== \"N/A\" &&\n        lmPrice !== \"N/A\"\n    );\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "de16f9bd-daf9-4b06-9354-afd21f5ec7cd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for Blink Health",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Yasmin  Check if price exists for Blink Health",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[4] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:239:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "b610e185-d539-4b17-9c2e-91089c566b25",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Check if price exists for GoodRx",
                    "fullTitle": "Frontend Tests Drug Search Tests Test search for drug Yasmin  Check if price exists for GoodRx",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "chai.assert.isTrue(prices[5] !== \"N/A\");",
                    "err": {
                      "message": "AssertionError: expected false to be true",
                      "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test\\frontend.test.js:244:41)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "b4db905a-a8bc-4cbb-a278-9ab95a99407a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "de16f9bd-daf9-4b06-9354-afd21f5ec7cd"
                ],
                "failures": [
                  "b610e185-d539-4b17-9c2e-91089c566b25",
                  "b4db905a-a8bc-4cbb-a278-9ab95a99407a"
                ],
                "pending": [],
                "skipped": [],
                "duration": 2864,
                "root": false,
                "rootEmpty": false,
                "_timeout": 15000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 15000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 15000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}